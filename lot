#!/bin/sh

# MIT License
#
# Copyright (c) 2019-2020 Hyeonki Hong <hhk7734@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Enable/Disable Spi, I2c, Uart, Etc.
# Pin number/function/status/mode/Etc.

RED=$(tput setaf 1)
# GREEN=$(tput setaf 2)
ORANGE=$(tput setaf 3)
# BLUE=$(tput setaf 4)
# PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
# LGRAY=$(tput setaf 7)

BOLD=$(tput bold)

DEFAULT=$(tput sgr0)

if [ "$(id -u)" -ne 0 ]; then
    printf "%sMust run as root privileges. %s%s\n" \
        "${RED}${BOLD}" \
        "Try 'sudo lot [options]'" \
        "${DEFAULT}" >&2
    exit 1
fi

if [ -z "${SUDO_USER}" ]; then
    export SUDO_USER=${USER}
fi

# shellcheck source=scripts/detect_device.sh
if [ -e '/usr/lib/lot' ]; then
    . /usr/lib/lot/*
else
    printf "%sFailed to find /usr/lib/lot.%s\n" \
        "${RED}${BOLD}" "${DEFAULT}" >&2
    exit 1
fi

readonly LOT_LISTS_PATH=/var/lib/lot/lists
readonly LOT_INSTALL_LOCK=/var/lib/lot/lock

get_os_name() {
    if cat /etc/*-release | grep -q "Ubuntu"; then
        LOT_OS=Ubuntu
    else
        LOT_OS=unknown
    fi

    echo ${LOT_OS}
}

readonly LOT_OS=$(get_os_name)
readonly LOT_DEVICE=$(get_device_name)
readonly LOT_CPP_PACKAGE=lot-${LOT_DEVICE}

printf "\n%s\n" "${CYAN}${BOLD}USER:   ${SUDO_USER}${DEFAULT}"
printf "%s\n" "${CYAN}${BOLD}OS:     ${LOT_OS}${DEFAULT}"
printf "%s\n\n" "${CYAN}${BOLD}Device: ${LOT_DEVICE}${DEFAULT}"

# ex)
# if exist_in_shell do_xxx; then
# fi
exist_in_shell() {
    command -V "$1" 2>/dev/null | grep -q shell
}

# ex)
# if confirm_installation git; then
# fi
confirm_installation() {
    [ -n "$(command -v "$1" 2>/dev/null)" ]
}

# ex)
# if exists_in "/dev" "spidev*"; then
# fi
exist_in() {
    [ -n "$(find "$1" -name "$2" 2>/dev/null)" ]
}

get_version() {
    if [ -e "/var/lib/lot/lists/$1/debian/changelog" ]; then
        head -n 1 "/var/lib/lot/lists/$1/debian/changelog" |
            sed 's/.* .\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/'
    fi
}

get_latest_version() {
    git ls-remote --tags --refs "https://github.com/loliot/$1" \
        2>/dev/null |
        sed 's/.*v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/' |
        sort -V | tail -n 1
}

check_version() {
    L_CURRENT_VERSION=$(get_version "$1")
    L_LATEST_VERSION=$(get_latest_version "$1")
    if [ "${L_CURRENT_VERSION}" = "${L_LATEST_VERSION}" ]; then
        printf "%s%s is already up to date (v%s).%s\n" \
            "${RED}${BOLD}" "$1" "${L_LATEST_VERSION}" \
            "${DEFAULT}" >&2
        return 1
    else
        if [ -n "${L_CURRENT_VERSION}" ]; then
            printf "%sUpdate version from v%s to v%s.%s\n" \
                "${ORANGE}${BOLD}" "${L_CURRENT_VERSION}" \
                "${L_LATEST_VERSION}" "${DEFAULT}"
        fi
    fi

    return 0
}

confirm_supports() {
    if [ "${LOT_DEVICE}" = "unknown" ]; then
        printf "%sThis device is not (yet) supported.%s\n" \
            "${RED}${BOLD}" "${DEFAULT}" >&2
        return 1
    fi

    if [ "${LOT_OS}" = "unknown" ]; then
        printf "%sThis OS is not (yet) supported.%s\n" \
            "${RED}${BOLD}" "${DEFAULT}" >&2
        return 1
    fi

    return 0
}

do_lock() {
    if [ -e "${LOT_INSTALL_LOCK}" ]; then
        printf "%s\n%s\n" \
            "${RED}${BOLD}Another package is being installed." \
            "If this problem persists, remove ${LOT_INSTALL_LOCK}.${DEFAULT}" \
            >&2
        return 1
    fi

    touch "${LOT_INSTALL_LOCK}"
    return 0
}

do_unlock() {
    if [ -e "${LOT_INSTALL_LOCK}" ]; then
        rm -f "${LOT_INSTALL_LOCK}"
    fi
}

install_using_git() {
    if check_version "$1"; then
        if [ -e /tmp/lot_clone ]; then rm -rf "/tmp/lot_clone"; fi
        install -m 0755 -d /tmp/lot_clone
        CLONE_PATH="/tmp/lot_clone/$1"
        git clone "https://github.com/loliot/$1.git" "${CLONE_PATH}"
        make -C "${CLONE_PATH}" uninstall
        make -C "${CLONE_PATH}"
        make -C "${CLONE_PATH}" install
        install -m 0755 -d "${LOT_LISTS_PATH}/$1/debian"
        install -m 0644 "${CLONE_PATH}/debian/changelog" "${LOT_LISTS_PATH}/$1/debian"
        install -m 0755 "${CLONE_PATH}/Makefile" "${LOT_LISTS_PATH}/$1"
        rm -rf "/tmp/lot_clone"
    else
        return 1
    fi

    return 0
}

uninstall_from_lists() {
    if ! [ -e "${LOT_LISTS_PATH}/$1" ]; then
        printf "%s%s is not installed.%s\n" \
            "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
        return 1
    fi

    make -C "${LOT_LISTS_PATH}/$1" uninstall &&
        rm -rf "${LOT_LISTS_PATH:?}/$1"
    return 0
}

update_using_install() {
    if ! [ -e "${LOT_LISTS_PATH}/$1" ]; then
        printf "%s%s is not installed.%s\n" \
            "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
        return 1
    fi

    do_install "$1"
}

do_install() {
    if ! do_lock; then return 1; fi

    if ! confirm_installation git; then
        printf "%sgit is required. Install git.%s\n" \
            "${RED}${BOLD}" "${DEFAULT}" >&2
        do_unlock
        return 1
    fi

    if ! confirm_installation pkg-config; then
        printf "%spkg-config is required. Install pkg-config.%s\n" \
            "${RED}${BOLD}" "${DEFAULT}" >&2
        do_unlock
        return 1
    fi

    case "$1" in
    cpp | c++ | ${LOT_CPP_PACKAGE}) install_using_git "${LOT_CPP_PACKAGE}" ;;

    lot) install_using_git "lot" ;;

    *)
        printf "%sUnknown package: '%s'%s\n" "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
        false
        ;;
    esac
    retval=$?

    do_unlock
    return ${retval}
}

do_uninstall() {
    if ! do_lock; then return 1; fi

    case "$1" in
    cpp | c++ | ${LOT_CPP_PACKAGE}) uninstall_from_lists "${LOT_CPP_PACKAGE}" ;;

    lot)
        whiptail --yesno "Would you like to remove lot?" 20 60 &&
            uninstall_from_lists "lot"
        ;;

    *)
        printf "%sUnknown package: '%s'%s\n" "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
        false
        ;;
    esac
    retval=$?

    do_unlock
    return ${retval}
}

do_update() {
    # update_using_install use 'do_install'.
    # Therefore no lock is needed.

    case "$1" in
    cpp | c++ | ${LOT_CPP_PACKAGE}) update_using_install "${LOT_CPP_PACKAGE}" ;;

    lot) update_using_install "lot" ;;

    *)
        printf "%sUnknown package: '%s'%s\n" "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
        false
        ;;
    esac
    return $?
}

case "$1" in
install)
    if ! confirm_supports; then return 1; fi
    do_install "$2"
    ;;

uninstall)
    if ! confirm_supports; then return 1; fi
    do_uninstall "$2"
    ;;

update)
    if ! confirm_supports; then return 1; fi
    do_update "$2"
    ;;

-v | --version)
    L_string=""
    for package in ${LOT_LISTS_PATH}/*; do
        package=$(echo "${package}" | sed 's/\/var\/lib\/lot\/lists\/\(.*\)/\1/')
        L_string="${L_string}${package}|v$(get_version "${package}")\n"
    done
    echo "${ORANGE}${BOLD}${L_string}${DEFAULT}" | column -t -s "|"
    ;;

"") ;;

*)
    printf "%sUnknown command: '%s'%s\n" "${RED}${BOLD}" "$1" "${DEFAULT}" >&2
    return 1
    ;;
esac
